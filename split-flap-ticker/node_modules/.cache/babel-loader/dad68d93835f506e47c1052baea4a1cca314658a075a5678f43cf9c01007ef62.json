{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\n\n// Replace 'YOUR_API_KEY' with your actual Alpha Vantage API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALPHA_VANTAGE_API_KEY = \"D1OVGLNPM5ZHM0K1\";\n\n// CoinGecko API key\nconst COINGECKO_API_KEY = \"CG-B9dykQhgqEKR5vrUKsCvBzap\";\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"cardano\"],\n  // CoinGecko IDs\n  stocks: [\"CIFR\", \"MSTR\", \"TSLA\", \"FBTC\", \"SPX\", \"DJI\"] // Stock symbols\n};\nconst DISPLAY_NAMES = {\n  bitcoin: \"BTC\",\n  cardano: \"ADA\"\n};\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nconst MOCK_CRYPTO_PRICES = {\n  BTC: 50000,\n  ADA: 2.5\n};\nconst MOCK_STOCK_PRICES = {\n  CIFR: 10,\n  MSTR: 600,\n  TSLA: 700,\n  FBTC: 50,\n  SPX: 4000,\n  DJI: 35000\n};\nconst MOCK_STOCK_CHANGES = {\n  CIFR: 1.5,\n  MSTR: -0.5,\n  TSLA: 2.0,\n  FBTC: -1.0,\n  SPX: 0.3,\n  DJI: -0.2\n};\nconst useMockData = true; // Set to true to use mock data\n\nfunction App() {\n  _s();\n  const [prices, setPrices] = useState({});\n  const [changes, setChanges] = useState({});\n  const fetchCryptoPrices = async () => {\n    if (useMockData) {\n      return MOCK_CRYPTO_PRICES;\n    }\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${SYMBOLS.crypto.join(\",\")}&vs_currencies=usd&x_cg_demo_api_key=${COINGECKO_API_KEY}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const cryptoPrices = {};\n      SYMBOLS.crypto.forEach(symbol => {\n        if (data[symbol]) {\n          cryptoPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n      return cryptoPrices;\n    } catch (error) {\n      console.error(\"Error fetching crypto prices:\", error);\n      return {};\n    }\n  };\n  const fetchStockPrices = async () => {\n    if (useMockData) {\n      setChanges(MOCK_STOCK_CHANGES);\n      return MOCK_STOCK_PRICES;\n    }\n    try {\n      const stockPrices = {};\n      const stockChanges = {};\n      for (const symbol of SYMBOLS.stocks) {\n        const response = await fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(`Data for ${symbol}:`, data); // Log the full response\n\n        if (data[\"Global Quote\"]) {\n          const price = parseFloat(data[\"Global Quote\"][\"05. price\"]);\n          const changePercent = parseFloat(data[\"Global Quote\"][\"10. change percent\"]);\n          stockPrices[symbol] = price;\n          stockChanges[symbol] = changePercent;\n        } else if (data.Information) {\n          console.error(`Rate limit exceeded: ${data.Information}`);\n          break; // Stop further requests if rate limit is hit\n        } else {\n          console.error(`No data for symbol: ${symbol}`);\n        }\n      }\n      setChanges(stockChanges);\n      return stockPrices;\n    } catch (error) {\n      console.error(\"Error fetching stock prices:\", error);\n      return {};\n    }\n  };\n  const fetchAllPrices = async () => {\n    const [cryptoPrices, stockPrices] = await Promise.all([fetchCryptoPrices(), fetchStockPrices()]);\n    setPrices({\n      ...cryptoPrices,\n      ...stockPrices\n    });\n  };\n  useEffect(() => {\n    fetchAllPrices();\n    const interval = setInterval(fetchAllPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticker-container\",\n      children: [...SYMBOLS.crypto, ...SYMBOLS.stocks].map(symbol => {\n        var _prices$symbol$toUppe;\n        return /*#__PURE__*/_jsxDEV(SplitFlapDisplay, {\n          symbol: DISPLAY_NAMES[symbol] || symbol.toUpperCase(),\n          price: ((_prices$symbol$toUppe = prices[symbol.toUpperCase()]) === null || _prices$symbol$toUppe === void 0 ? void 0 : _prices$symbol$toUppe.toFixed(2)) || \"0.00\",\n          change: changes[symbol]\n        }, symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yelur0D4b2GPhu/H4YOC268Ay4Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SplitFlapDisplay","jsxDEV","_jsxDEV","ALPHA_VANTAGE_API_KEY","COINGECKO_API_KEY","SYMBOLS","crypto","stocks","DISPLAY_NAMES","bitcoin","cardano","REFRESH_INTERVAL","MOCK_CRYPTO_PRICES","BTC","ADA","MOCK_STOCK_PRICES","CIFR","MSTR","TSLA","FBTC","SPX","DJI","MOCK_STOCK_CHANGES","useMockData","App","_s","prices","setPrices","changes","setChanges","fetchCryptoPrices","response","fetch","join","ok","Error","status","data","json","cryptoPrices","forEach","symbol","toUpperCase","usd","error","console","fetchStockPrices","stockPrices","stockChanges","log","price","parseFloat","changePercent","Information","fetchAllPrices","Promise","all","interval","setInterval","clearInterval","className","children","map","_prices$symbol$toUppe","toFixed","change","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\n\n// Replace 'YOUR_API_KEY' with your actual Alpha Vantage API key\nconst ALPHA_VANTAGE_API_KEY = \"D1OVGLNPM5ZHM0K1\";\n\n// CoinGecko API key\nconst COINGECKO_API_KEY = \"CG-B9dykQhgqEKR5vrUKsCvBzap\";\n\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"cardano\"], // CoinGecko IDs\n  stocks: [\"CIFR\", \"MSTR\", \"TSLA\", \"FBTC\", \"SPX\", \"DJI\"], // Stock symbols\n};\n\nconst DISPLAY_NAMES = {\n  bitcoin: \"BTC\",\n  cardano: \"ADA\",\n};\n\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nconst MOCK_CRYPTO_PRICES = {\n  BTC: 50000,\n  ADA: 2.5,\n};\n\nconst MOCK_STOCK_PRICES = {\n  CIFR: 10,\n  MSTR: 600,\n  TSLA: 700,\n  FBTC: 50,\n  SPX: 4000,\n  DJI: 35000,\n};\n\nconst MOCK_STOCK_CHANGES = {\n  CIFR: 1.5,\n  MSTR: -0.5,\n  TSLA: 2.0,\n  FBTC: -1.0,\n  SPX: 0.3,\n  DJI: -0.2,\n};\n\nconst useMockData = true; // Set to true to use mock data\n\nfunction App() {\n  const [prices, setPrices] = useState({});\n  const [changes, setChanges] = useState({});\n\n  const fetchCryptoPrices = async () => {\n    if (useMockData) {\n      return MOCK_CRYPTO_PRICES;\n    }\n\n    try {\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${SYMBOLS.crypto.join(\n          \",\"\n        )}&vs_currencies=usd&x_cg_demo_api_key=${COINGECKO_API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const cryptoPrices = {};\n      SYMBOLS.crypto.forEach((symbol) => {\n        if (data[symbol]) {\n          cryptoPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n\n      return cryptoPrices;\n    } catch (error) {\n      console.error(\"Error fetching crypto prices:\", error);\n      return {};\n    }\n  };\n\n  const fetchStockPrices = async () => {\n    if (useMockData) {\n      setChanges(MOCK_STOCK_CHANGES);\n      return MOCK_STOCK_PRICES;\n    }\n\n    try {\n      const stockPrices = {};\n      const stockChanges = {};\n      for (const symbol of SYMBOLS.stocks) {\n        const response = await fetch(\n          `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(`Data for ${symbol}:`, data); // Log the full response\n\n        if (data[\"Global Quote\"]) {\n          const price = parseFloat(data[\"Global Quote\"][\"05. price\"]);\n          const changePercent = parseFloat(\n            data[\"Global Quote\"][\"10. change percent\"]\n          );\n          stockPrices[symbol] = price;\n          stockChanges[symbol] = changePercent;\n        } else if (data.Information) {\n          console.error(`Rate limit exceeded: ${data.Information}`);\n          break; // Stop further requests if rate limit is hit\n        } else {\n          console.error(`No data for symbol: ${symbol}`);\n        }\n      }\n\n      setChanges(stockChanges);\n      return stockPrices;\n    } catch (error) {\n      console.error(\"Error fetching stock prices:\", error);\n      return {};\n    }\n  };\n\n  const fetchAllPrices = async () => {\n    const [cryptoPrices, stockPrices] = await Promise.all([\n      fetchCryptoPrices(),\n      fetchStockPrices(),\n    ]);\n\n    setPrices({ ...cryptoPrices, ...stockPrices });\n  };\n\n  useEffect(() => {\n    fetchAllPrices();\n    const interval = setInterval(fetchAllPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"ticker-container\">\n        {[...SYMBOLS.crypto, ...SYMBOLS.stocks].map((symbol) => (\n          <SplitFlapDisplay\n            key={symbol}\n            symbol={DISPLAY_NAMES[symbol] || symbol.toUpperCase()}\n            price={prices[symbol.toUpperCase()]?.toFixed(2) || \"0.00\"}\n            change={changes[symbol]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}