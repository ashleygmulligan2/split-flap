{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"ethereum\"],\n  // CoinGecko IDs\n  stocks: [\"tesla\", \"coinbase\"] // Company names in CoinGecko format\n};\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nfunction App() {\n  _s();\n  const [prices, setPrices] = useState({});\n  const fetchPrices = async () => {\n    try {\n      // Get all prices in one API call\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${[...SYMBOLS.crypto, ...SYMBOLS.stocks].join(\",\")}&vs_currencies=usd`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Format the prices\n      const newPrices = {};\n      [...SYMBOLS.crypto, ...SYMBOLS.stocks].forEach(symbol => {\n        if (data[symbol]) {\n          newPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n      setPrices(newPrices);\n    } catch (error) {\n      console.error(\"Error fetching prices:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPrices();\n    const interval = setInterval(fetchPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticker-container\",\n      children: [...SYMBOLS.crypto, ...SYMBOLS.stocks].map(symbol => {\n        var _prices$symbol$toUppe;\n        return /*#__PURE__*/_jsxDEV(SplitFlapDisplay, {\n          symbol: symbol.toUpperCase(),\n          price: ((_prices$symbol$toUppe = prices[symbol.toUpperCase()]) === null || _prices$symbol$toUppe === void 0 ? void 0 : _prices$symbol$toUppe.toFixed(2)) || \"0.00\"\n        }, symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AyDZng7+aEBipOGwqaguTBzobZI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SplitFlapDisplay","jsxDEV","_jsxDEV","SYMBOLS","crypto","stocks","REFRESH_INTERVAL","App","_s","prices","setPrices","fetchPrices","response","fetch","join","ok","Error","status","data","json","newPrices","forEach","symbol","toUpperCase","usd","error","console","interval","setInterval","clearInterval","className","children","map","_prices$symbol$toUppe","price","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\nimport \"./App.css\";\n\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"ethereum\"], // CoinGecko IDs\n  stocks: [\"tesla\", \"coinbase\"], // Company names in CoinGecko format\n};\n\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nfunction App() {\n  const [prices, setPrices] = useState({});\n\n  const fetchPrices = async () => {\n    try {\n      // Get all prices in one API call\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${[\n          ...SYMBOLS.crypto,\n          ...SYMBOLS.stocks,\n        ].join(\",\")}&vs_currencies=usd`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      // Format the prices\n      const newPrices = {};\n      [...SYMBOLS.crypto, ...SYMBOLS.stocks].forEach((symbol) => {\n        if (data[symbol]) {\n          newPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n\n      setPrices(newPrices);\n    } catch (error) {\n      console.error(\"Error fetching prices:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchPrices();\n    const interval = setInterval(fetchPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"ticker-container\">\n        {[...SYMBOLS.crypto, ...SYMBOLS.stocks].map((symbol) => (\n          <SplitFlapDisplay\n            key={symbol}\n            symbol={symbol.toUpperCase()}\n            price={prices[symbol.toUpperCase()]?.toFixed(2) || \"0.00\"}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}