{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\n\n// Replace 'YOUR_API_KEY' with your actual Alpha Vantage API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALPHA_VANTAGE_API_KEY = \"YOUR_API_KEY\";\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"cardano\"],\n  // CoinGecko IDs\n  stocks: [\"CIFR\", \"MSTR\", \"TSLA\", \"FBTC\", \"SPX\", \"DJI\"] // Stock symbols\n};\nconst DISPLAY_NAMES = {\n  bitcoin: \"BTC\",\n  cardano: \"ADA\"\n};\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nfunction App() {\n  _s();\n  const [prices, setPrices] = useState({});\n  const [changes, setChanges] = useState({});\n  const fetchCryptoPrices = async () => {\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${SYMBOLS.crypto.join(\",\")}&vs_currencies=usd`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const cryptoPrices = {};\n      SYMBOLS.crypto.forEach(symbol => {\n        if (data[symbol]) {\n          cryptoPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n      return cryptoPrices;\n    } catch (error) {\n      console.error(\"Error fetching crypto prices:\", error);\n      return {};\n    }\n  };\n  const fetchStockPrices = async () => {\n    try {\n      const stockPrices = {};\n      const stockChanges = {};\n      for (const symbol of SYMBOLS.stocks) {\n        const response = await fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(`Data for ${symbol}:`, data); // Log the full response\n\n        if (data[\"Global Quote\"]) {\n          const price = parseFloat(data[\"Global Quote\"][\"05. price\"]);\n          const changePercent = parseFloat(data[\"Global Quote\"][\"10. change percent\"]);\n          stockPrices[symbol] = price;\n          stockChanges[symbol] = changePercent;\n        } else {\n          console.error(`No data for symbol: ${symbol}`);\n        }\n      }\n      setChanges(stockChanges);\n      return stockPrices;\n    } catch (error) {\n      console.error(\"Error fetching stock prices:\", error);\n      return {};\n    }\n  };\n  const fetchAllPrices = async () => {\n    const [cryptoPrices, stockPrices] = await Promise.all([fetchCryptoPrices(), fetchStockPrices()]);\n    setPrices({\n      ...cryptoPrices,\n      ...stockPrices\n    });\n  };\n  useEffect(() => {\n    fetchAllPrices();\n    const interval = setInterval(fetchAllPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticker-container\",\n      children: [...SYMBOLS.crypto, ...SYMBOLS.stocks].map(symbol => {\n        var _prices$symbol$toUppe;\n        return /*#__PURE__*/_jsxDEV(SplitFlapDisplay, {\n          symbol: DISPLAY_NAMES[symbol] || symbol.toUpperCase(),\n          price: ((_prices$symbol$toUppe = prices[symbol.toUpperCase()]) === null || _prices$symbol$toUppe === void 0 ? void 0 : _prices$symbol$toUppe.toFixed(2)) || \"0.00\",\n          change: changes[symbol]\n        }, symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yelur0D4b2GPhu/H4YOC268Ay4Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SplitFlapDisplay","jsxDEV","_jsxDEV","ALPHA_VANTAGE_API_KEY","SYMBOLS","crypto","stocks","DISPLAY_NAMES","bitcoin","cardano","REFRESH_INTERVAL","App","_s","prices","setPrices","changes","setChanges","fetchCryptoPrices","response","fetch","join","ok","Error","status","data","json","cryptoPrices","forEach","symbol","toUpperCase","usd","error","console","fetchStockPrices","stockPrices","stockChanges","log","price","parseFloat","changePercent","fetchAllPrices","Promise","all","interval","setInterval","clearInterval","className","children","map","_prices$symbol$toUppe","toFixed","change","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SplitFlapDisplay from \"./components/SplitFlapDisplay\";\n\n// Replace 'YOUR_API_KEY' with your actual Alpha Vantage API key\nconst ALPHA_VANTAGE_API_KEY = \"YOUR_API_KEY\";\n\nconst SYMBOLS = {\n  crypto: [\"bitcoin\", \"cardano\"], // CoinGecko IDs\n  stocks: [\"CIFR\", \"MSTR\", \"TSLA\", \"FBTC\", \"SPX\", \"DJI\"], // Stock symbols\n};\n\nconst DISPLAY_NAMES = {\n  bitcoin: \"BTC\",\n  cardano: \"ADA\",\n};\n\nconst REFRESH_INTERVAL = 15000; // 15 seconds to avoid rate limits\n\nfunction App() {\n  const [prices, setPrices] = useState({});\n  const [changes, setChanges] = useState({});\n\n  const fetchCryptoPrices = async () => {\n    try {\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${SYMBOLS.crypto.join(\n          \",\"\n        )}&vs_currencies=usd`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const cryptoPrices = {};\n      SYMBOLS.crypto.forEach((symbol) => {\n        if (data[symbol]) {\n          cryptoPrices[symbol.toUpperCase()] = data[symbol].usd;\n        }\n      });\n\n      return cryptoPrices;\n    } catch (error) {\n      console.error(\"Error fetching crypto prices:\", error);\n      return {};\n    }\n  };\n\n  const fetchStockPrices = async () => {\n    try {\n      const stockPrices = {};\n      const stockChanges = {};\n      for (const symbol of SYMBOLS.stocks) {\n        const response = await fetch(\n          `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(`Data for ${symbol}:`, data); // Log the full response\n\n        if (data[\"Global Quote\"]) {\n          const price = parseFloat(data[\"Global Quote\"][\"05. price\"]);\n          const changePercent = parseFloat(\n            data[\"Global Quote\"][\"10. change percent\"]\n          );\n          stockPrices[symbol] = price;\n          stockChanges[symbol] = changePercent;\n        } else {\n          console.error(`No data for symbol: ${symbol}`);\n        }\n      }\n\n      setChanges(stockChanges);\n      return stockPrices;\n    } catch (error) {\n      console.error(\"Error fetching stock prices:\", error);\n      return {};\n    }\n  };\n\n  const fetchAllPrices = async () => {\n    const [cryptoPrices, stockPrices] = await Promise.all([\n      fetchCryptoPrices(),\n      fetchStockPrices(),\n    ]);\n\n    setPrices({ ...cryptoPrices, ...stockPrices });\n  };\n\n  useEffect(() => {\n    fetchAllPrices();\n    const interval = setInterval(fetchAllPrices, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"ticker-container\">\n        {[...SYMBOLS.crypto, ...SYMBOLS.stocks].map((symbol) => (\n          <SplitFlapDisplay\n            key={symbol}\n            symbol={DISPLAY_NAMES[symbol] || symbol.toUpperCase()}\n            price={prices[symbol.toUpperCase()]?.toFixed(2) || \"0.00\"}\n            change={changes[symbol]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}