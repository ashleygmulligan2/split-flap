{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/components/SplitFlapDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./SplitFlapDisplay.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHARS = \"0123456789.,ABCDEFGHIJKLMNOPQRSTUVWXYZ $%-/\";\nconst SplitFlapCell = ({\n  target,\n  duration = 50,\n  style\n}) => {\n  _s();\n  const [current, setCurrent] = useState(target);\n  const [flipping, setFlipping] = useState(false);\n  useEffect(() => {\n    if (target === current) return;\n    setFlipping(true);\n    let currentIndex = CHARS.indexOf(current);\n\n    // Play flip sound\n    const audio = new Audio(\"/flip-sound.mp3\");\n    audio.play();\n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % CHARS.length;\n      setCurrent(CHARS[currentIndex]);\n      if (CHARS[currentIndex] === target) {\n        clearInterval(interval);\n        setFlipping(false);\n      }\n    }, duration);\n    return () => clearInterval(interval);\n  }, [target, current, duration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `split-flap-cell ${flipping ? \"flipping\" : \"\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: style,\n      children: current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(SplitFlapCell, \"/PCUSpFp+TrWTeufWQzB44zFcJw=\");\n_c = SplitFlapCell;\nconst SplitFlapDisplay = ({\n  symbol,\n  price,\n  change\n}) => {\n  const changeColor = change > 0 ? \"#009a44\" : \"#da291c\";\n  const changeSign = change < 0 ? \"-\" : \" \";\n  const changeText = `${Math.abs(change).toFixed(1)}%`;\n  const priceText = `$${Math.ceil(price).toLocaleString()}`;\n\n  // Define a color mapping for each ticker\n  const tickerColors = {\n    BTC: \"#f7931a\",\n    // Bitcoin\n    ADA: \"#0033ad\",\n    // Cardano\n    CIFR: \"#ff6600\",\n    // Example color for CIFR\n    MSTR: \"#ff0000\",\n    // Example color for MSTR\n    TSLA: \"#cc0000\",\n    // Example color for TSLA\n    FBTC: \"#00cc00\",\n    // Example color for FBTC\n    SPX: \"#0000cc\",\n    // Example color for SPX\n    DJI: \"#cccc00\" // Example color for DJI\n  };\n\n  // Get the color for the current ticker symbol\n  const tickerColor = tickerColors[symbol] || \"#2a2a2a\"; // Default color if not specified\n\n  // Ensure the ticker symbol is at least 4 characters long\n  const paddedSymbol = symbol.padEnd(4, \" \");\n  const paddedChangeText = changeText.padEnd(6, \" \"); // Assuming 6 cells for change\n  const paddedPriceText = priceText.padStart(8, \" \"); // Assuming 8 cells for price\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"split-flap-display\",\n    style: {\n      padding: \"10px\",\n      borderRadius: \"8px\"\n    },\n    children: [paddedSymbol.split(\"\").map((char, index) => /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: char.toUpperCase()\n    }, `symbol-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: \" \",\n      style: {\n        backgroundColor: changeColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: changeSign\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), paddedChangeText.split(\"\").map((char, index) => /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: char.toUpperCase()\n    }, `change-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)), paddedPriceText.split(\"\").map((char, index) => /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: char.toUpperCase()\n    }, `price-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(SplitFlapCell, {\n      target: \" \",\n      style: {\n        backgroundColor: tickerColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c2 = SplitFlapDisplay;\nexport default SplitFlapDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"SplitFlapCell\");\n$RefreshReg$(_c2, \"SplitFlapDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CHARS","SplitFlapCell","target","duration","style","_s","current","setCurrent","flipping","setFlipping","currentIndex","indexOf","audio","Audio","play","interval","setInterval","length","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","SplitFlapDisplay","symbol","price","change","changeColor","changeSign","changeText","Math","abs","toFixed","priceText","ceil","toLocaleString","tickerColors","BTC","ADA","CIFR","MSTR","TSLA","FBTC","SPX","DJI","tickerColor","paddedSymbol","padEnd","paddedChangeText","paddedPriceText","padStart","padding","borderRadius","split","map","char","index","toUpperCase","backgroundColor","_c2","$RefreshReg$"],"sources":["/Users/ashleymulligan/Documents/GitHub/split-flap/split-flap-ticker/src/components/SplitFlapDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./SplitFlapDisplay.css\";\n\nconst CHARS = \"0123456789.,ABCDEFGHIJKLMNOPQRSTUVWXYZ $%-/\";\n\nconst SplitFlapCell = ({ target, duration = 50, style }) => {\n  const [current, setCurrent] = useState(target);\n  const [flipping, setFlipping] = useState(false);\n\n  useEffect(() => {\n    if (target === current) return;\n\n    setFlipping(true);\n    let currentIndex = CHARS.indexOf(current);\n\n    // Play flip sound\n    const audio = new Audio(\"/flip-sound.mp3\");\n    audio.play();\n\n    const interval = setInterval(() => {\n      currentIndex = (currentIndex + 1) % CHARS.length;\n      setCurrent(CHARS[currentIndex]);\n\n      if (CHARS[currentIndex] === target) {\n        clearInterval(interval);\n        setFlipping(false);\n      }\n    }, duration);\n\n    return () => clearInterval(interval);\n  }, [target, current, duration]);\n\n  return (\n    <div className={`split-flap-cell ${flipping ? \"flipping\" : \"\"}`}>\n      <span style={style}>{current}</span>\n    </div>\n  );\n};\n\nconst SplitFlapDisplay = ({ symbol, price, change }) => {\n  const changeColor = change > 0 ? \"#009a44\" : \"#da291c\";\n  const changeSign = change < 0 ? \"-\" : \" \";\n  const changeText = `${Math.abs(change).toFixed(1)}%`;\n  const priceText = `$${Math.ceil(price).toLocaleString()}`;\n\n  // Define a color mapping for each ticker\n  const tickerColors = {\n    BTC: \"#f7931a\", // Bitcoin\n    ADA: \"#0033ad\", // Cardano\n    CIFR: \"#ff6600\", // Example color for CIFR\n    MSTR: \"#ff0000\", // Example color for MSTR\n    TSLA: \"#cc0000\", // Example color for TSLA\n    FBTC: \"#00cc00\", // Example color for FBTC\n    SPX: \"#0000cc\", // Example color for SPX\n    DJI: \"#cccc00\", // Example color for DJI\n  };\n\n  // Get the color for the current ticker symbol\n  const tickerColor = tickerColors[symbol] || \"#2a2a2a\"; // Default color if not specified\n\n  // Ensure the ticker symbol is at least 4 characters long\n  const paddedSymbol = symbol.padEnd(4, \" \");\n  const paddedChangeText = changeText.padEnd(6, \" \"); // Assuming 6 cells for change\n  const paddedPriceText = priceText.padStart(8, \" \"); // Assuming 8 cells for price\n\n  return (\n    <div\n      className=\"split-flap-display\"\n      style={{ padding: \"10px\", borderRadius: \"8px\" }}\n    >\n      {/* Ticker Symbol */}\n      {paddedSymbol.split(\"\").map((char, index) => (\n        <SplitFlapCell key={`symbol-${index}`} target={char.toUpperCase()} />\n      ))}\n\n      {/* Change Indicator */}\n      <SplitFlapCell target=\" \" style={{ backgroundColor: changeColor }} />\n\n      {/* Change Sign */}\n      <SplitFlapCell target={changeSign} />\n\n      {/* Percentage Change */}\n      {paddedChangeText.split(\"\").map((char, index) => (\n        <SplitFlapCell key={`change-${index}`} target={char.toUpperCase()} />\n      ))}\n\n      {/* Current Price */}\n      {paddedPriceText.split(\"\").map((char, index) => (\n        <SplitFlapCell key={`price-${index}`} target={char.toUpperCase()} />\n      ))}\n      <SplitFlapCell target=\" \" style={{ backgroundColor: tickerColor }} />\n    </div>\n  );\n};\n\nexport default SplitFlapDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}